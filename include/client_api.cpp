//
// Created by niickson on 7/7/21.
//

#include "client_api.hpp"

int client_api::run() {
    net::io_context ioc;

    // These objects perform our I/O
    tcp::resolver resolver(ioc);
    beast::tcp_stream stream(ioc);

    // Look up the domain name
    auto const results = resolver.resolve(host, port);
    const std::string target = ".";
    int version = 11;

    // Make the connection on the IP address we get from a lookup
    stream.connect(results);

    antimalware_client client;
    try {
        while (true){
            // Set up an HTTP POST request message
            http::request<http::string_body> req{http::verb::post, target, version};
            req.set(http::field::host, host);
            req.set(http::field::user_agent, BOOST_BEAST_VERSION_STRING);
            req.body() = client.request();
            req.prepare_payload();
            // Send the HTTP request to the remote host
            http::write(stream, req);

            // This buffer is used for reading and must be persisted
            beast::flat_buffer buffer;

            // Declare a container to hold the response
            http::response<http::string_body> res;

            // Receive the HTTP response
            http::read(stream, buffer, res);
            if (res.result() == http::status::bad_request){
                std::cout << res.body() << std::endl;
                continue;
            }
            // Write the message to standard out
            try {
                client.parse_response(res.body(), std::cout);
            } catch (const std::runtime_error& e) {
                std::cout << e.what() << std::endl;
            }
        }
    } catch (const beast::system_error & e) {
        std::cout << e.what() << std::endl;
    }

    // Gracefully close the socket
    beast::error_code ec;
    stream.socket().shutdown(tcp::socket::shutdown_both, ec);

    // not_connected happens sometimes
    // so don't bother reporting it.
    //
    if(ec && ec != beast::errc::not_connected)
        throw beast::system_error{ec};
    return 0;
}

client_api::client_api(char* host_, char* port_)
    : host(host_)
    , port(port_)
{}
