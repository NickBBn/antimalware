//
// Created by niickson on 7/7/21.
//

#include "server_api.hpp"


void
fail(beast::error_code ec, char const* what)
{
    std::cerr << what << ": " << ec.message() << std::endl;
}

template<class Stream>
struct sender
{
public:
    Stream& stream_;
    bool& close_;
    beast::error_code& ec_;
    explicit
    sender(
            Stream& stream,
            bool& close,
            beast::error_code& ec)
            : stream_(stream)
            , close_(close)
            , ec_(ec)
    {
    }
    template<bool isRequest, class Body, class Fields>
    void
    operator()(http::message<isRequest, Body, Fields>&& msg) const
    {
        close_ = msg.need_eof();
        // We need the serializer here because the serializer requires
        // a non-const file_body, and the message oriented version of
        // http::write only works with const messages.
        http::serializer<isRequest, Body, Fields> sr{msg};
        http::write(stream_, sr, ec_);
    }
};


int server_api::run() {
    net::io_context ioc{1};

    // The acceptor receives incoming connections
    tcp::acceptor acceptor{ioc, {address, port}};
    for(;;)
    {
        // This will receive the new connection
        tcp::socket socket{ioc};

        // Block until we get a connection
        acceptor.accept(socket);

        // Launch the session, transferring ownership of the socket
        std::thread{std::bind(&do_session,std::move(socket))}.detach();
    }
}

server_api::server_api(const net::ip::address &address_, const unsigned short &port_)
    : address(address_)
    , port(port_)
{}

void server_api::do_session(tcp::socket &socket) {
    antimalware_server amw;
    bool close = false;
    beast::error_code ec;

    // This buffer is required to persist across reads
    beast::flat_buffer buffer;

    // This class is used to send messages
    sender<tcp::socket> lambda{socket, close, ec};

    for(;;)
    {
        // Read a request
        http::request<http::string_body> req;
        http::read(socket, buffer, req, ec);
        if(ec == http::error::end_of_stream)
            break;
        if(ec)
            return fail(ec, "read");

        // Send the response
        handle_request(std::move(req), lambda, amw);
        if(ec)
            return fail(ec, "write");
        if(close)
        {
            // This means we should close the connection, usually because
            // the response indicated the "Connection: close" semantic.
            break;
        }
    }
    // Send a TCP shutdown
    socket.shutdown(tcp::socket::shutdown_send, ec);
}

template<class Send>
void server_api::handle_request(http::request<http::string_body> &&req,
                                Send &&send, antimalware_server &amw) {
    bool json_error = false;
    bool http_error = false;
    std::string output_to_send;
    if (req.method() != http::verb::post) {
        http_error = true;
    } else {
        try {
            std::string path_to_dir = amw.parse_request(req.body());
            amw.scan(path_to_dir);
        } catch (const std::runtime_error &e) {
            json_error = true;
        }
    }
    output_to_send = amw.json_results(json_error, http_error);
    http::response<http::string_body> res{http::status::ok, req.version()};
    res.set(http::field::server, BOOST_BEAST_VERSION_STRING);
    res.set(http::field::content_type, "application/json");
    res.keep_alive(req.keep_alive());
    res.body() = output_to_send;
    res.prepare_payload();
    return send(std::move(res));
}